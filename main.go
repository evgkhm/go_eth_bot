package main

import (
	"encoding/json"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"io"
	"log"
	"math/big"
	"net/http"
	"os"
	"regexp"
	"strconv"
)

// CryptoUserData —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type CryptoUserData struct {
	Address string //ETH address
	Result  string `json:"result"`
}

// CryptoResponsePrice —Å–æ–∂–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ eth
type CryptoResponsePrice struct {
	Result struct {
		Ethusd string `json:"ethusd"`
	} `json:"result"`
}

// CryptoResponseGas —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –≥–∞–∑–µ
type CryptoResponseGas struct {
	Result struct {
		SafeGasPrice    string `json:"SafeGasPrice"`
		ProposeGasPrice string `json:"ProposeGasPrice"`
		FastGasPrice    string `json:"FastGasPrice"`
	} `json:"result"`
}

// firstKeyboard –ø–µ—Ä–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¢–ì
var firstKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìä–¶–µ–Ω–∞ ETH!", "/get_price"),
		tgbotapi.NewInlineKeyboardButtonData("‚õΩ–¶–µ–Ω–∞ Gas!", "/get_gas"),
	),
)

// secondKeyboard –≤—Ç–æ—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¢–ì
var secondKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üî∑–ë–∞–ª–∞–Ω—Å ETH", "/get_balance"),
		tgbotapi.NewInlineKeyboardButtonData("üí≤–ë–∞–ª–∞–Ω—Å –≤ USD", "/get_balance_usd"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìä–¶–µ–Ω–∞ ETH", "/get_price"),
		tgbotapi.NewInlineKeyboardButtonData("‚õΩ–¶–µ–Ω–∞ Gas", "/get_gas"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô–î—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å ETH", "/change_addr"),
	),
)

// Page –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¢–ì
type Page int

const (
	First Page = iota + 1
	Second
)

func main() {
	dotenv := goDotEnvVariable("TG_API_KEY")
	// –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—É —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞
	bot, err := tgbotapi.NewBotAPI(dotenv)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = false

	updates := bot.ListenForWebhook("/" + bot.Token)

	//—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã heroku –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ port
	http.HandleFunc("/", MainHandler)
	go func() {
		err := http.ListenAndServe(":"+os.Getenv("PORT"), nil)
		if err != nil {
			log.Panic(err)
		}
	}()

	var newResp CryptoUserData
	usersList := make(map[int64]string) //–∑–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	// —á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
	for update := range updates {
		if update.Message != nil && update.Message.Text == "/start" {
			//–≤ —á–∞—Ç –≤–æ—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ
			str := fmt.Sprintf(`–ü—Ä–∏–≤–µ—Ç %s! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞, –≥–∞–∑–∞ –∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.
–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞`, update.Message.From.FirstName)
			SendTgMess(update.Message.Chat.ID, str, bot, First)
		} else if update.Message != nil {
			//–µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–ì
			newResp.Address = update.Message.Text
			if IsValidAddress(newResp.Address) {
				ChatID := update.Message.Chat.ID    //–ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				usersList[ChatID] = newResp.Address //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è 1 —Ä–∞–∑!!!!!!!!
				str := "–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
				SendTgMess(update.Message.Chat.ID, str, bot, Second)
			} else {
				newResp.Address = ""
				str := "–í–≤–µ–¥–∏—Ç–µ ETH –∞–¥—Ä–µ—Å"
				SendTgMess(update.Message.Chat.ID, str, bot, First)
			}
		}

		//–µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
		if update.CallbackQuery != nil {
			switch update.CallbackQuery.Data {
			case "/get_balance":
				if IsValidAddress(newResp.Address) { //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
					ChatID := update.CallbackQuery.Message.Chat.ID //–ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					newResp.Address = usersList[ChatID]            //–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –º–∞–ø—ã –∞–¥—Ä–µ—Å —ç—Ñ–∏—Ä–∞
					ethBalance := GetBalanceRequest(newResp.Address)
					str := fmt.Sprint(ethBalance, " ETH")
					SendTgMess(update.CallbackQuery.Message.Chat.ID, str, bot, Second)
				} else {
					newResp.Address = ""
					str := "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å"
					SendTgMess(update.CallbackQuery.Message.Chat.ID, str, bot, First)
				}
			case "/get_balance_usd":
				if IsValidAddress(newResp.Address) { //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
					ChatID := update.CallbackQuery.Message.Chat.ID //–ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					newResp.Address = usersList[ChatID]            //–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –º–∞–ø—ã –∞–¥—Ä–µ—Å —ç—Ñ–∏—Ä–∞
					ethBalance := GetBalanceRequest(newResp.Address)
					ethPrice := GetEthPrice()
					usdBalance := new(big.Float).Mul(ethBalance, ethPrice)
					str := fmt.Sprintf("%.2f USD", usdBalance)
					SendTgMess(update.CallbackQuery.Message.Chat.ID, str, bot, Second)
				} else {
					newResp.Address = ""
					str := "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å"
					SendTgMess(update.CallbackQuery.Message.Chat.ID, str, bot, First)
				}
			case "/get_price":
				ethPrice := GetEthPrice()
				str := fmt.Sprint(ethPrice, " USD")

				//–ï—Å–ª–∏ –∞–¥—Ä–µ—Å–∞ –Ω–µ—Ç –≤—ã–∑–æ–≤ –ø–µ—Ä–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
				if newResp.Address == "" {
					SendTgMess(update.CallbackQuery.Message.Chat.ID, str, bot, First)
				} else {
					SendTgMess(update.CallbackQuery.Message.Chat.ID, str, bot, Second)
				}
			case "/get_gas":
				lowGas, averageGas, highGas := GetGasPrice()
				str := fmt.Sprintf("Low %d gwei \nAverage %d gwei \nHigh %d gwei", lowGas, averageGas, highGas)

				//–ï—Å–ª–∏ –∞–¥—Ä–µ—Å–∞ –Ω–µ—Ç –≤—ã–∑–æ–≤ –ø–µ—Ä–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
				if newResp.Address == "" {
					SendTgMess(update.CallbackQuery.Message.Chat.ID, str, bot, First)
				} else {
					SendTgMess(update.CallbackQuery.Message.Chat.ID, str, bot, Second)
				}
			case "/change_addr":
				ChatID := update.CallbackQuery.Message.Chat.ID //–ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				delete(usersList, ChatID)                      //—É–¥–∞–ª—è–µ–º –∏–∑ –º–∞–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				newResp.Address = ""
				fallthrough
			default:
				newResp.Address = update.CallbackQuery.Message.Text
				if IsValidAddress(newResp.Address) {
					str := "–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
					SendTgMess(update.CallbackQuery.Message.Chat.ID, str, bot, Second)
				} else {
					newResp.Address = ""
					str := "–í–≤–µ–¥–∏—Ç–µ ETH –∞–¥—Ä–µ—Å"
					SendTgMess(update.CallbackQuery.Message.Chat.ID, str, bot, First)
				}
			}
		}
	}
}

// MainHandler —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å heroku
func MainHandler(resp http.ResponseWriter, _ *http.Request) {
	_, err := resp.Write([]byte("Hi there! I'm Bot!"))
	if err != nil {
		log.Panic(err)
	}
}

// use godot package to load/read the .env file and
// return the value of the key
func goDotEnvVariable(key string) string {
	// load .env file
	err := godotenv.Load(".env")

	if err != nil {
		log.Fatalf("Error loading .env file")
	}

	return os.Getenv(key)
}

// GetGasPrice —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≥–∞–∑–∞ —Å–µ—Ç–∏ eth
func GetGasPrice() (uint32, uint32, uint32) {
	// godotenv package
	dotenv := goDotEnvVariable("API_KEY")

	resp, err := http.Get("https://api.etherscan.io/api" +
		"?module=gastracker" +
		"&action=gasoracle" +
		"&apikey=" + dotenv)
	if err != nil {
		log.Fatalln(err)
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatalln(err)
		}
	}(resp.Body)

	//Decode the data
	var cResp CryptoResponseGas
	if err := json.NewDecoder(resp.Body).Decode(&cResp); err != nil {
		log.Fatal("error while decode data from get eth price")
	}

	//From string to uint32
	safeGasPrice, err := strconv.ParseUint(cResp.Result.SafeGasPrice, 10, 32)
	if err != nil {
		panic(err)
	}
	proposeGasPrice, err := strconv.ParseUint(cResp.Result.ProposeGasPrice, 10, 32)
	if err != nil {
		panic(err)
	}
	fastGasPrice, err := strconv.ParseUint(cResp.Result.FastGasPrice, 10, 32)
	if err != nil {
		panic(err)
	}

	return uint32(safeGasPrice), uint32(proposeGasPrice), uint32(fastGasPrice)
}

// SendTgMess —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ì
func SendTgMess(id int64, str string, bot *tgbotapi.BotAPI, page Page) {
	msg := tgbotapi.NewMessage(id, str)

	//–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	switch page {
	case First:
		msg.ReplyMarkup = firstKeyboard
	case Second:
		msg.ReplyMarkup = secondKeyboard
	}

	//–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ì
	_, err := bot.Send(msg)
	if err != nil {
		return
	}
}

// IsValidAddress —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ eth –∞–¥—Ä–µ—Å–∞
func IsValidAddress(v string) bool {
	re := regexp.MustCompile("^0x[\\da-fA-F]{40}$")
	return re.MatchString(v)
}

// GetEthPrice —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ eth
func GetEthPrice() *big.Float {
	// godotenv package
	dotenv := goDotEnvVariable("API_KEY")

	resp, err := http.Get("https://api.etherscan.io/api" +
		"?module=stats" +
		"&action=ethprice" +
		"&apikey=" + dotenv)
	if err != nil {
		log.Fatalln(err)
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatalln(err)
		}
	}(resp.Body)

	//–ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
	var cResp CryptoResponsePrice
	if err := json.NewDecoder(resp.Body).Decode(&cResp); err != nil {
		log.Fatal("error while decode data from get eth price")
	}

	ethPrice := new(big.Float)
	ethPrice.SetString(cResp.Result.Ethusd)

	return ethPrice
}

// GetBalanceRequest —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ eth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func GetBalanceRequest(address string) *big.Float {
	// godotenv package
	dotenv := goDotEnvVariable("API_KEY")

	rawAddress := "&address=" + address

	resp, err := http.Get("https://api.etherscan.io/api" +
		"?module=account" +
		"&action=balance" +
		rawAddress +
		"&tag=latest" +
		"&apikey=" + dotenv)
	if err != nil {
		log.Fatalln(err)
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatalln(err)
		}
	}(resp.Body)

	//–ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö, –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–∞–µ–º WEI
	var cResp CryptoUserData
	if err := json.NewDecoder(resp.Body).Decode(&cResp); err != nil {
		log.Fatal("ooopsss! an error occurred, please try again")
	}
	wei := new(big.Float)
	wei.SetString(cResp.Result)

	weiDivision := big.NewFloat(1000000000000000000)

	//–∏–∑ WEI –≤ ETH
	ethBalance := new(big.Float).Quo(wei, weiDivision)

	return ethBalance
}
